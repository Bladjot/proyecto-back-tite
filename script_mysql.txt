-- ============================================================
-- Base de datos: pulgashop_pf
-- Módulo: Autenticación y Perfiles (Auth + Profiles)
-- ============================================================

CREATE DATABASE IF NOT EXISTS pulgashop_pf
  CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;
USE pulgashop_pf;

-- ======================
-- TABLAS PRINCIPALES
-- ======================

-- USERS (credenciales/autenticación)
CREATE TABLE IF NOT EXISTS users (
  id            BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  email         VARCHAR(255) NOT NULL,
  email_norm    VARCHAR(255) AS (LOWER(email)) STORED,
  username      VARCHAR(50)  NOT NULL,
  username_norm VARCHAR(50)  AS (LOWER(username)) STORED,
  password_hash VARCHAR(255) NOT NULL,         -- hash Argon2id/BCrypt
  is_email_verified BOOLEAN NOT NULL DEFAULT 0,
  status        ENUM('active','blocked','pending') NOT NULL DEFAULT 'active',
  last_login_at DATETIME NULL,
  created_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  deleted_at    DATETIME NULL,
  CONSTRAINT uq_users_email UNIQUE (email_norm),
  CONSTRAINT uq_users_username UNIQUE (username_norm)
) ENGINE=InnoDB;

-- PROFILES (1:1 con users)
CREATE TABLE IF NOT EXISTS profiles (
  user_id     BIGINT UNSIGNED PRIMARY KEY,
  full_name   VARCHAR(120) NOT NULL,
  avatar_url  VARCHAR(500) NULL,
  bio         VARCHAR(280) NULL,
  phone       VARCHAR(30)  NULL,
  country     VARCHAR(80)  NULL,
  city        VARCHAR(80)  NULL,
  address     VARCHAR(200) NULL,
  zip_code    VARCHAR(20)  NULL,
  preferences JSON NULL,  -- ejemplo: { "lang": "es", "notif": { "email": true } }
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT fk_profiles_user FOREIGN KEY (user_id) REFERENCES users(id)
    ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB;

-- ROLES
CREATE TABLE IF NOT EXISTS roles (
  id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  code VARCHAR(64) NOT NULL,            -- 'admin','seller','buyer'
  name VARCHAR(100) NOT NULL,
  description VARCHAR(255) NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT uq_roles_code UNIQUE (code)
) ENGINE=InnoDB;

-- PERMISSIONS (catálogo del módulo)
CREATE TABLE IF NOT EXISTS permissions (
  id BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  code VARCHAR(100) NOT NULL,           -- ej: 'profile:update:any'
  description VARCHAR(255) NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  updated_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  CONSTRAINT uq_permissions_code UNIQUE (code)
) ENGINE=InnoDB;

-- N:N usuario-rol
CREATE TABLE IF NOT EXISTS user_roles (
  user_id BIGINT UNSIGNED NOT NULL,
  role_id BIGINT UNSIGNED NOT NULL,
  granted_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (user_id, role_id),
  CONSTRAINT fk_user_roles_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_user_roles_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- N:N rol-permiso
CREATE TABLE IF NOT EXISTS role_permissions (
  role_id BIGINT UNSIGNED NOT NULL,
  permission_id BIGINT UNSIGNED NOT NULL,
  PRIMARY KEY (role_id, permission_id),
  CONSTRAINT fk_role_perm_role FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE,
  CONSTRAINT fk_role_perm_perm FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- Overrides opcionales por usuario (granular)
CREATE TABLE IF NOT EXISTS user_permissions (
  user_id BIGINT UNSIGNED NOT NULL,
  permission_id BIGINT UNSIGNED NOT NULL,
  kind ENUM('grant','revoke') NOT NULL,
  PRIMARY KEY (user_id, permission_id),
  CONSTRAINT fk_user_perm_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
  CONSTRAINT fk_user_perm_perm FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- SESIONES / REFRESH TOKENS
CREATE TABLE IF NOT EXISTS auth_sessions (
  id            BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  user_id       BIGINT UNSIGNED NOT NULL,
  refresh_token CHAR(64) NOT NULL,      -- almacena hash/ID del refresh
  user_agent    VARCHAR(255) NULL,
  ip_address    VARBINARY(16) NULL,     -- usar INET6_ATON()/INET6_NTOA() en la app
  expires_at    DATETIME NOT NULL,
  created_at    DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  revoked_at    DATETIME NULL,
  CONSTRAINT uq_refresh UNIQUE (refresh_token),
  CONSTRAINT fk_sessions_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- TOKENS de verificación de email
CREATE TABLE IF NOT EXISTS email_verifications (
  id          BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  user_id     BIGINT UNSIGNED NOT NULL,
  token       CHAR(64) NOT NULL,        -- guarda hash del token
  expires_at  DATETIME NOT NULL,
  consumed_at DATETIME NULL,
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT uq_email_verif_token UNIQUE (token),
  CONSTRAINT fk_email_verif_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- TOKENS de reseteo de contraseña
CREATE TABLE IF NOT EXISTS password_resets (
  id          BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  user_id     BIGINT UNSIGNED NOT NULL,
  token       CHAR(64) NOT NULL,        -- guarda hash del token
  expires_at  DATETIME NOT NULL,
  consumed_at DATETIME NULL,
  created_at  DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CONSTRAINT uq_pwd_reset_token UNIQUE (token),
  CONSTRAINT fk_pwd_reset_user FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
) ENGINE=InnoDB;

-- AUDITORÍA
CREATE TABLE IF NOT EXISTS audit_log (
  id         BIGINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
  user_id    BIGINT UNSIGNED NULL,
  action     VARCHAR(80) NOT NULL,      -- 'auth.login','profile.update','auth.failed', etc.
  resource   VARCHAR(120) NULL,         -- 'users:42'
  meta       JSON NULL,
  ip_address VARBINARY(16) NULL,
  created_at DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  INDEX idx_audit_user_created (user_id, created_at DESC)
) ENGINE=InnoDB;

-- ======================
-- ÍNDICES ÚTILES
-- ======================
CREATE INDEX IF NOT EXISTS idx_users_status   ON users(status);
CREATE INDEX IF NOT EXISTS idx_profiles_name  ON profiles(full_name);
CREATE INDEX IF NOT EXISTS idx_sessions_user  ON auth_sessions(user_id, expires_at);

-- ======================
-- SEMILLAS (roles y permisos del módulo)
-- ======================

-- ROLES (comprador, vendedor, admin)
INSERT INTO roles (code, name, description) VALUES
('admin','Administrador','Acceso total al módulo de Auth+Profiles'),
('seller','Vendedor','Vendedor en PulgaShop (módulo Auth+Profiles)'),
('buyer','Comprador','Comprador en PulgaShop (módulo Auth+Profiles)')
ON DUPLICATE KEY UPDATE
  name = VALUES(name),
  description = VALUES(description);

-- PERMISOS del módulo (Auth + Profiles)
INSERT INTO permissions (code, description) VALUES
('auth:login',           'Iniciar sesión'),
('auth:logout',          'Cerrar sesión'),
('auth:session:revoke',  'Revocar sesiones de otros usuarios'),
('profile:read:self',    'Ver perfil propio'),
('profile:update:self',  'Editar perfil propio'),
('profile:read:any',     'Ver cualquier perfil'),
('profile:update:any',   'Editar cualquier perfil'),
('user:read:any',        'Ver cualquier usuario'),
('user:update:any',      'Editar cualquier usuario'),
('user:ban',             'Bloquear usuarios'),
('role:assign',          'Asignar roles a usuarios')
ON DUPLICATE KEY UPDATE
  description = VALUES(description);

-- ROLE → PERM para buyer y seller (idénticos en este módulo)
INSERT INTO role_permissions (role_id, permission_id)
SELECT r.id, p.id
FROM roles r
JOIN permissions p ON p.code IN ('auth:login','auth:logout','profile:read:self','profile:update:self')
WHERE r.code IN ('buyer','seller')
ON DUPLICATE KEY UPDATE role_id = role_id;

-- ROLE → PERM para admin (todos los del módulo)
INSERT INTO role_permissions (role_id, permission_id)
SELECT r.id, p.id
FROM roles r
CROSS JOIN permissions p
WHERE r.code = 'admin'
ON DUPLICATE KEY UPDATE role_id = role_id;



